(declare-const grn Bool)
(declare-const circuit Bool)
(declare-const org Bool)
(declare-const rd1 Bool)
(declare-const rd2 Bool)
(define @t1 () (not rd2))
(define @t2 () (and (not rd1) @t1))
(define @t3 () (not org))
(define @t4 () (not @t3))
(assume @p1 (=> org @t2))
(assume @p2 (=> rd1 @t1))
(assume @p3 circuit)
(assume @p4 rd2)
(assume @p5 (not grn))
(assume @p6 @t4)
(step @p7 (= @t4 org) :rule bool-double-not-elim :args (org))
(step @p8 org :rule eq_resolve :premises (@p6 @p7))
(step @p9 (or @t3 @t2) :rule implies_elim :premises (@p1))
(step @p10 @t2 :rule resolution :premises (@p9 @p8) :args (false org))
(step @p11 @t1 :rule and_elim :premises (@p10) :args (1))
(step @p12 false :rule contra :premises (@p4 @p11))
