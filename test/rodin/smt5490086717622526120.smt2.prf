(declare-const prt Bool)
(declare-const red_SR Bool)
(declare-const red_MR Bool)
(declare-const org_SR Bool)
(declare-const grn_SR Bool)
(declare-const org_MR Bool)
(declare-const grn_MR Bool)
(declare-const grn Bool)
(declare-const org Bool)
(declare-const rd1 Bool)
(declare-const rd2 Bool)
(declare-const circuit Bool)
(define @t1 () (not rd2))
(define @t2 () (not org))
(define @t3 () (or grn rd1))
(define @t4 () (and rd1 prt))
(define @t5 () (not prt))
(define @t6 () (and grn @t5))
(define @t7 () (and @t5 rd1))
(define @t8 () (and prt grn))
(define @t9 () (or @t8 org @t7 rd2 @t6 @t4))
(define @t10 () (not @t9))
(define @t11 () (not red_MR))
(define @t12 () (= prt prt))
(define @t13 () (not @t5))
(define @t14 () (= @t13 prt))
(define @t15 () (= prt @t13))
(define @t16 () (or prt @t11))
(define @t17 () (or @t13 @t11))
(define @t18 () (and red_MR prt))
(define @t19 () (and red_SR @t5))
(define @t20 () (and @t5 red_MR))
(define @t21 () (and prt red_SR))
(define @t22 () (or @t21 @t20 @t19 @t18))
(define @t23 () (or @t21 false @t20 false @t19 @t18))
(define @t24 () (= @t23 @t22))
(define @t25 () (not @t22))
(define @t26 () (not @t23))
(define @t27 () (= rd2 false))
(define @t28 () (not org_MR))
(define @t29 () (= org_MR false))
(define @t30 () (or @t5 @t11))
(define @t31 () (@list false))
(define @t32 () (or red_SR red_MR))
(define @t33 () (or red_MR red_SR))
(define @t34 () (not red_SR))
(define @t35 () (or @t34 prt))
(define @t36 () (or @t34 @t13))
(define @t37 () (or prt @t34))
(assume @p1 circuit)
(assume @p2 (=> grn (and @t2 (not rd1) @t1)))
(assume @p3 (=> rd1 @t1))
(assume @p4 (= grn_MR grn))
(assume @p5 (= org_MR org))
(assume @p6 (= grn_SR rd1))
(assume @p7 (= org_SR rd2))
(assume @p8 @t3)
(assume @p9 (= red_MR rd1))
(assume @p10 (= red_SR grn))
(assume @p11 @t10)
(step @p12 (= @t11 @t11) :rule refl :args (@t11))
(step @p13 (= @t12 true) :rule eq-refl :args (prt))
(step @p14 @t14 :rule bool-double-not-elim :args (prt))
(step @p15 @t12 :rule refl :args (prt))
(step @p16 (= @t15 @t12) :rule cong :premises (@p15 @p14) :args (@t15))
(step @p17 (= @t15 true) :rule trans :premises (@p16 @p13))
(step @p18 (= @t14 @t15) :rule eq-symm :args (@t13 prt))
(step @p19 (= @t14 true) :rule trans :premises (@p18 @p17))
(step @p20 @t14 :rule true_elim :premises (@p19))
(step @p21 (= @t17 @t16) :rule nary_cong :premises (@p20 @p12) :args (@t17))
(step @p22 @t24 :rule aci_norm :args (@t24))
(step @p23 (= @t26 @t25) :rule cong :premises (@p22) :args (@t26))
(step @p24 (= rd1 red_MR) :rule symm :premises (@p9))
(step @p25 (= @t4 @t18) :rule nary_cong :premises (@p24 @p15) :args (@t4))
(step @p26 (= @t5 @t5) :rule refl :args (@t5))
(step @p27 (= grn red_SR) :rule symm :premises (@p10))
(step @p28 (= @t6 @t19) :rule nary_cong :premises (@p27 @p26) :args (@t6))
(step @p29 (= @t27 @t1) :rule bool-eq-false :args (rd2))
(step @p30 (= @t1 @t27) :rule symm :premises (@p29))
(step @p31 @t1 :rule not_or_elim :premises (@p11) :args (3))
(step @p32 @t27 :rule eq_resolve :premises (@p31 @p30))
(step @p33 (= @t7 @t20) :rule nary_cong :premises (@p26 @p24) :args (@t7))
(step @p34 (= @t29 @t28) :rule bool-eq-false :args (org_MR))
(step @p35 (= @t28 @t29) :rule symm :premises (@p34))
(step @p36 @t2 :rule not_or_elim :premises (@p11) :args (1))
(step @p37 (= org org_MR) :rule symm :premises (@p5))
(step @p38 (or org @t28) :rule equiv_elim2 :premises (@p37))
(step @p39 @t28 :rule resolution :premises (@p38 @p36) :args (true org))
(step @p40 @t29 :rule eq_resolve :premises (@p39 @p35))
(step @p41 (= org false) :rule trans :premises (@p37 @p40))
(step @p42 (= @t8 @t21) :rule nary_cong :premises (@p15 @p27) :args (@t8))
(step @p43 (= @t9 @t23) :rule nary_cong :premises (@p42 @p41 @p33 @p32 @p28 @p25) :args (@t9))
(step @p44 (= @t10 @t26) :rule cong :premises (@p43) :args (@t10))
(step @p45 (= @t10 @t25) :rule trans :premises (@p44 @p23))
(step @p46 @t25 :rule eq_resolve :premises (@p11 @p45))
(step @p47 (not @t20) :rule not_or_elim :premises (@p46) :args (1))
(step @p48 @t17 :rule not_and :premises (@p47))
(step @p49 @t16 :rule eq_resolve :premises (@p48 @p21))
(step @p50 (not @t18) :rule not_or_elim :premises (@p46) :args (3))
(step @p51 (or @t11 @t5) :rule not_and :premises (@p50))
(step @p52 @t30 :rule reordering :premises (@p51) :args (@t30))
(step @p53 (or @t11 @t11) :rule chain_resolution :premises (@p52 @p49) :args (@t31 (@list prt)))
(step @p54 @t11 :rule factoring :premises (@p53))
(step @p55 (= @t3 @t32) :rule nary_cong :premises (@p27 @p24) :args (@t3))
(step @p56 @t32 :rule eq_resolve :premises (@p8 @p55))
(step @p57 @t33 :rule reordering :premises (@p56) :args (@t33))
(step @p58 red_SR :rule chain_resolution :premises (@p57 @p54) :args ((@list true) (@list red_MR)))
(step @p59 (not @t21) :rule not_or_elim :premises (@p46) :args (0))
(step @p60 (or @t5 @t34) :rule not_and :premises (@p59))
(step @p61 @t5 :rule chain_resolution :premises (@p60 @p58) :args (@t31 (@list red_SR)))
(step @p62 (= @t34 @t34) :rule refl :args (@t34))
(step @p63 (= @t36 @t35) :rule nary_cong :premises (@p62 @p20) :args (@t36))
(step @p64 (not @t19) :rule not_or_elim :premises (@p46) :args (2))
(step @p65 @t36 :rule not_and :premises (@p64))
(step @p66 @t35 :rule eq_resolve :premises (@p65 @p63))
(step @p67 @t37 :rule reordering :premises (@p66) :args (@t37))
(step @p68 false :rule chain_resolution :premises (@p67 @p61 @p58) :args ((@list true false) (@list prt red_SR)))
