(declare-type Z ())
(declare-type MODE ())
(declare-const r1 Z)
(declare-const i2 Bool)
(declare-const r2 Z)
(declare-const a2 Z)
(declare-const b2 Z)
(declare-const a1 Z)
(declare-const b1 Z)
(declare-const p2 Bool)
(declare-const i1 Bool)
(declare-const mode MODE)
(declare-const cir MODE)
(define @t1 () (= r2 b2))
(define @t2 () (not i2))
(define @t3 () (= @t2 @t1))
(define @t4 () (not @t1))
(define @t5 () (= i2 @t4))
(define @t6 () (not @t5))
(define @t7 () (= b2 r2))
(define @t8 () (not @t7))
(define @t9 () (= @t7 @t8))
(define @t10 () (not @t8))
(define @t11 () (not @t10))
(define @t12 () (= @t7 @t11))
(define @t13 () (= @t11 @t7))
(define @t14 () (= i2 @t10))
(define @t15 () (= i2 @t8))
(define @t16 () (not @t15))
(define @t17 () (= @t2 @t7))
(assume @p1 (= mode cir))
(assume @p2 i1)
(assume @p3 (not p2))
(assume @p4 (= a1 b1))
(assume @p5 (= a2 b2))
(assume @p6 @t3)
(assume @p7 (not (= r1 b1)))
(assume @p8 @t6)
(step @p9 (= @t9 false) :rule bool-eq-nrefl :args (@t7))
(step @p10 (= @t10 @t7) :rule bool-double-not-elim :args (@t7))
(step @p11 (= @t11 @t8) :rule cong :premises (@p10) :args (@t11))
(step @p12 (= @t7 @t7) :rule refl :args (@t7))
(step @p13 (= @t12 @t9) :rule cong :premises (@p12 @p11) :args (@t12))
(step @p14 (= @t12 false) :rule trans :premises (@p13 @p9))
(step @p15 (= @t13 @t12) :rule eq-symm :args (@t11 @t7))
(step @p16 (= @t13 false) :rule trans :premises (@p15 @p14))
(step @p17 (= @t16 @t14) :rule bool-not-eq-elim2 :args (i2 @t8))
(step @p18 (= @t1 @t7) :rule eq-symm :args (r2 b2))
(step @p19 (= @t4 @t8) :rule cong :premises (@p18) :args (@t4))
(step @p20 (= i2 i2) :rule refl :args (i2))
(step @p21 (= @t5 @t15) :rule cong :premises (@p20 @p19) :args (@t5))
(step @p22 (= @t6 @t16) :rule cong :premises (@p21) :args (@t6))
(step @p23 @t16 :rule eq_resolve :premises (@p8 @p22))
(step @p24 @t14 :rule eq_resolve :premises (@p23 @p17))
(step @p25 (= @t2 @t11) :rule cong :premises (@p24) :args (@t2))
(step @p26 (= @t17 @t13) :rule cong :premises (@p25 @p12) :args (@t17))
(step @p27 (= @t17 false) :rule trans :premises (@p26 @p16))
(step @p28 (= @t2 @t2) :rule refl :args (@t2))
(step @p29 (= @t3 @t17) :rule cong :premises (@p28 @p18) :args (@t3))
(step @p30 (= @t3 false) :rule trans :premises (@p29 @p27))
(step @p31 false :rule eq_resolve :premises (@p6 @p30))
