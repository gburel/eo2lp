(declare-const rd1 Bool)
(declare-const grn Bool)
(declare-const rd2 Bool)
(declare-const circuit Bool)
(define @t1 () (not rd2))
(define @t2 () (not rd1))
(define @t3 () (not @t2))
(assume @p1 circuit)
(assume @p2 rd2)
(assume @p3 (not grn))
(assume @p4 (=> rd1 @t1))
(assume @p5 @t3)
(step @p6 (= @t3 rd1) :rule bool-double-not-elim :args (rd1))
(step @p7 rd1 :rule eq_resolve :premises (@p5 @p6))
(step @p8 (or @t2 @t1) :rule implies_elim :premises (@p4))
(step @p9 @t1 :rule resolution :premises (@p8 @p7) :args (false rd1))
(step @p10 false :rule contra :premises (@p2 @p9))
