(declare-const prt Bool)
(declare-const red_SR Bool)
(declare-const org_MR Bool)
(declare-const grn_MR Bool)
(declare-const grn Bool)
(declare-const org Bool)
(declare-const rd1 Bool)
(declare-const grn_SR Bool)
(declare-const org_SR Bool)
(declare-const red_MR Bool)
(declare-const rd2 Bool)
(declare-const circuit Bool)
(define @t1 () (not rd2))
(define @t2 () (not rd1))
(define @t3 () (not org))
(define @t4 () (and @t3 @t2 @t1))
(define @t5 () (and @t2 @t1))
(define @t6 () (and prt grn))
(define @t7 () (= org @t6))
(define @t8 () (not @t4))
(define @t9 () (not grn))
(define @t10 () (not @t6))
(define @t11 () (not @t5))
(assume @p1 circuit)
(assume @p2 rd2)
(assume @p3 red_MR)
(assume @p4 (or grn_SR org_SR))
(assume @p5 (=> grn @t4))
(assume @p6 (=> org @t5))
(assume @p7 (=> rd1 @t1))
(assume @p8 (= grn_MR grn))
(assume @p9 (= org_MR org))
(assume @p10 (= grn_SR rd1))
(assume @p11 (= org_SR rd2))
(assume @p12 (= red_SR (or grn org)))
(assume @p13 (not @t7))
(step @p14 (or @t8 @t1) :rule cnf_and_pos :args (@t4 2))
(step @p15 @t8 :rule resolution :premises (@p14 @p2) :args (false rd2))
(step @p16 (or @t9 @t4) :rule implies_elim :premises (@p5))
(step @p17 @t9 :rule resolution :premises (@p16 @p15) :args (true @t4))
(step @p18 (or @t10 grn) :rule cnf_and_pos :args (@t6 1))
(step @p19 @t10 :rule resolution :premises (@p18 @p17) :args (true grn))
(step @p20 (or @t11 @t1) :rule cnf_and_pos :args (@t5 1))
(step @p21 @t11 :rule resolution :premises (@p20 @p2) :args (false rd2))
(step @p22 (or @t3 @t5) :rule implies_elim :premises (@p6))
(step @p23 @t3 :rule resolution :premises (@p22 @p21) :args (true @t5))
(step @p24 (or @t7 org @t6) :rule cnf_equiv_neg1 :args (@t7))
(step @p25 @t7 :rule chain_resolution :premises (@p24 @p23 @p19) :args ((@list true true) (@list org @t6)))
(step @p26 false :rule contra :premises (@p25 @p13))
