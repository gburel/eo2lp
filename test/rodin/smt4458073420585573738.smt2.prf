(declare-type Z ())
(declare-const input Bool)
(declare-const reg Bool)
(declare-const nf Z)
(declare-const flash Z)
(declare-const circuit Bool)
(define @t1 () (not reg))
(define @t2 () (not input))
(define @t3 () (and @t2 reg))
(assume @p1 circuit)
(assume @p2 (= nf flash))
(assume @p3 (not (or @t3 input @t1)))
(step @p4 (not @t3) :rule not_or_elim :premises (@p3) :args (0))
(step @p5 (not @t1) :rule not_or_elim :premises (@p3) :args (2))
(step @p6 reg :rule not_not_elim :premises (@p5))
(step @p7 @t2 :rule not_or_elim :premises (@p3) :args (1))
(step @p8 @t3 :rule and_intro :premises (@p7 @p6))
(step @p9 false :rule contra :premises (@p8 @p4))
