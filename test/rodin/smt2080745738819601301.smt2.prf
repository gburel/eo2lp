(declare-const org Bool)
(declare-const rd1 Bool)
(declare-const grn Bool)
(declare-const rd2 Bool)
(declare-const circuit Bool)
(define @t1 () (not rd2))
(define @t2 () (and (not rd1) @t1))
(define @t3 () (not org))
(define @t4 () (not @t3))
(define @t5 () (not @t2))
(assume @p1 circuit)
(assume @p2 rd2)
(assume @p3 (not grn))
(assume @p4 (=> org @t2))
(assume @p5 (=> rd1 @t1))
(assume @p6 @t4)
(step @p7 (or @t5 @t1) :rule cnf_and_pos :args (@t2 1))
(step @p8 @t5 :rule resolution :premises (@p7 @p2) :args (false rd2))
(step @p9 (= @t4 org) :rule bool-double-not-elim :args (org))
(step @p10 org :rule eq_resolve :premises (@p6 @p9))
(step @p11 (or @t3 @t2) :rule implies_elim :premises (@p4))
(step @p12 @t2 :rule resolution :premises (@p11 @p10) :args (false org))
(step @p13 false :rule contra :premises (@p12 @p8))
