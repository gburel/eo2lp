(declare-type Z ())
(declare-const reg Bool)
(declare-const input Bool)
(declare-const nf0 Z)
(declare-const flash Z)
(declare-const nf Z)
(declare-const circuit Bool)
(define @t1 () (= flash nf))
(define @t2 () (= flash nf0))
(define @t3 () (= nf0 nf))
(define @t4 () (= nf0 flash))
(define @t5 () (not @t4))
(define @t6 () (and @t5 @t3))
(define @t7 () (not (not @t6)))
(define @t8 () (and false true))
(define @t9 () (= nf0 nf0))
(define @t10 () (not true))
(define @t11 () (not @t9))
(define @t12 () (and @t11 @t9))
(define @t13 () (= nf nf0))
(define @t14 () (not @t2))
(define @t15 () (and @t14 @t13))
(assume @p1 (not circuit))
(assume @p2 (or @t2 @t1))
(assume @p3 (= reg input))
(assume @p4 @t7)
(step @p5 (= @t8 false) :rule evaluate :args (@t8))
(step @p6 (= @t9 true) :rule eq-refl :args (nf0))
(step @p7 (= @t10 false) :rule evaluate :args (@t10))
(step @p8 (= @t11 @t10) :rule cong :premises (@p6) :args (@t11))
(step @p9 (= @t11 false) :rule trans :premises (@p8 @p7))
(step @p10 (= @t12 @t8) :rule nary_cong :premises (@p9 @p6) :args (@t12))
(step @p11 (= @t12 false) :rule trans :premises (@p10 @p5))
(step @p12 @t9 :rule refl :args (nf0))
(step @p13 (= @t3 @t13) :rule eq-symm :args (nf0 nf))
(step @p14 (= @t4 @t2) :rule eq-symm :args (nf0 flash))
(step @p15 (= @t5 @t14) :rule cong :premises (@p14) :args (@t5))
(step @p16 (= @t6 @t15) :rule nary_cong :premises (@p15 @p13) :args (@t6))
(step @p17 (= @t7 @t6) :rule bool-double-not-elim :args (@t6))
(step @p18 (= @t7 @t15) :rule trans :premises (@p17 @p16))
(step @p19 @t15 :rule eq_resolve :premises (@p4 @p18))
(step @p20 @t13 :rule and_elim :premises (@p19) :args (1))
(step @p21 (= @t13 @t9) :rule cong :premises (@p20 @p12) :args (@t13))
(step @p22 (= flash flash) :rule refl :args (flash))
(step @p23 (= @t1 @t2) :rule cong :premises (@p22 @p20) :args (@t1))
(step @p24 @t14 :rule and_elim :premises (@p19) :args (0))
(step @p25 @t1 :rule chain_resolution :premises (@p2 @p24) :args ((@list true) (@list @t2)))
(step @p26 @t2 :rule eq_resolve :premises (@p25 @p23))
(step @p27 (= @t2 @t9) :rule cong :premises (@p26 @p12) :args (@t2))
(step @p28 (= @t14 @t11) :rule cong :premises (@p27) :args (@t14))
(step @p29 (= @t15 @t12) :rule nary_cong :premises (@p28 @p21) :args (@t15))
(step @p30 (= @t15 false) :rule trans :premises (@p29 @p11))
(step @p31 (= @t7 false) :rule trans :premises (@p18 @p30))
(step @p32 false :rule eq_resolve :premises (@p4 @p31))
